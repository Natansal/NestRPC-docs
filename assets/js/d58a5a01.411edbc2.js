"use strict";(self.webpackChunknestjs_rpc_docs=self.webpackChunknestjs_rpc_docs||[]).push([[16],{395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"client/batching","title":"Batching","description":"How client-side batching combines calls into a single request","source":"@site/docs/client/batching.md","sourceDirName":"client","slug":"/client/batching","permalink":"/NestRPC-docs/docs/client/batching","draft":false,"unlisted":false,"editUrl":"https://github.com/Natansal/NestRPC-docs.git/docs/client/batching.md","tags":[],"version":"current","frontMatter":{"title":"Batching","description":"How client-side batching combines calls into a single request"},"sidebar":"tutorialSidebar","previous":{"title":"Client Configuration","permalink":"/NestRPC-docs/docs/client/configuration"},"next":{"title":"Error Handling","permalink":"/NestRPC-docs/docs/client/error-handling"}}');var c=t(4848),s=t(8453);const l={title:"Batching",description:"How client-side batching combines calls into a single request"},r=void 0,a={},o=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:"The client batches multiple calls into one POST to reduce network overhead."}),"\n",(0,c.jsx)(n.p,{children:"Mechanics:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Each call is queued with an incrementing id and its method path."}),"\n",(0,c.jsxs)(n.li,{children:["The URL encodes ",(0,c.jsx)(n.code,{children:"calls"})," like ",(0,c.jsx)(n.code,{children:"1:user.get,2:user.list"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["The body is an array: ",(0,c.jsx)(n.code,{children:"[{ id: '1', input: {...} }, { id: '2', input: undefined }]"}),"."]}),"\n",(0,c.jsx)(n.li,{children:"The server pairs each body item with its query entry and executes in parallel."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["Defaults: ",(0,c.jsx)(n.code,{children:"{ enabled: true, maxBatchSize: 20, debounceMs: 50, maxUrlSize: 2048 }"}),"."]}),"\n",(0,c.jsx)(n.p,{children:"Configuration:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"createRpcClient<RpcApp>({\n  baseUrl: 'http://localhost:3000',\n  apiPrefix: 'api',\n  batch: { enabled: true, maxBatchSize: 5, debounceMs: 10 },\n});\n"})}),"\n",(0,c.jsx)(n.p,{children:"Disabling:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"createRpcClient<RpcApp>({ baseUrl: '...', batch: false });\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Oversized calls: If a queued batch would exceed ",(0,c.jsx)(n.code,{children:"maxUrlSize"})," or ",(0,c.jsx)(n.code,{children:"maxBatchSize"}),", it flushes and retries the last item in a new batch. If a single call exceeds ",(0,c.jsx)(n.code,{children:"maxUrlSize"}),", an error is thrown."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const c={},s=i.createContext(c);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);