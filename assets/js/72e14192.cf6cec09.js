"use strict";(self.webpackChunknestjs_rpc_docs=self.webpackChunknestjs_rpc_docs||[]).push([[814],{1953:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"quick-start","title":"Quick Start","description":"Install, configure, and call your first RPC with NestJS RPC","source":"@site/docs/quick-start.md","sourceDirName":".","slug":"/quick-start","permalink":"/NestRPC-docs/docs/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/Natansal/NestRPC-docs/blob/main/docs/quick-start.md","tags":[],"version":"current","frontMatter":{"title":"Quick Start","description":"Install, configure, and call your first RPC with NestJS RPC","slug":"/quick-start"},"sidebar":"tutorialSidebar","next":{"title":"Best Practices","permalink":"/NestRPC-docs/docs/best-practices"}}');var s=r(4848),i=r(8453);const a={title:"Quick Start",description:"Install, configure, and call your first RPC with NestJS RPC",slug:"/quick-start"},o=void 0,c={},l=[{value:"Install",id:"install",level:3},{value:"1) Define routers and routes (server)",id:"1-define-routers-and-routes-server",level:3},{value:"2) Declare the manifest (server)",id:"2-declare-the-manifest-server",level:3},{value:"3) Initialize RPC before NestFactory.create (server)",id:"3-initialize-rpc-before-nestfactorycreate-server",level:3},{value:"4) Create a typed client (client)",id:"4-create-a-typed-client-client",level:3},{value:"5) Call methods like local functions (client)",id:"5-call-methods-like-local-functions-client",level:3},{value:"Example repo",id:"example-repo",level:3}];function d(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"install",children:"Install"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Server (NestJS app)\nnpm install @nestjs-rpc/server\n\n# Client (web/app)\nnpm install @nestjs-rpc/client axios\n"})}),"\n",(0,s.jsx)(t.h3,{id:"1-define-routers-and-routes-server",children:"1) Define routers and routes (server)"}),"\n",(0,s.jsxs)(t.p,{children:["Create a router with ",(0,s.jsx)(t.code,{children:"@Router()"})," and expose methods with ",(0,s.jsx)(t.code,{children:"@Route()"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// user.queries.router.ts\nimport { Router, Route } from "@nestjs-rpc/server";\n\n@Router()\nexport class UserQueriesRouter {\n   @Route()\n   getUser({ id }: { id: string }) {\n      return { id, name: "Ada" };\n   }\n\n   @Route()\n   listUsers() {\n      return [{ id: "1", name: "Ada" }];\n   }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Optional: add Nest param decorators (like any controller method). The first param stays your RPC input; decorate subsequent params."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Router, Route } from "@nestjs-rpc/server";\nimport { Req, Headers } from "@nestjs/common";\nimport type { Request } from "express";\n\n@Router()\nexport class UserMutationsRouter {\n   @Route()\n   updateUser(\n      { id, name }: { id: string; name: string },\n      @Req() req: Request,\n      @Headers("x-trace") trace?: string,\n   ) {\n      // use req.user, headers, etc.\n      return { id, name, updatedBy: req.ip, trace };\n   }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Important: The first parameter in each route method is reserved for the incoming input. Its TypeScript type flows to the\nclient automatically."}),"\n",(0,s.jsx)(t.h3,{id:"2-declare-the-manifest-server",children:"2) Declare the manifest (server)"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"defineManifest()"})," to map keys to routers or nested maps. Export ",(0,s.jsx)(t.code,{children:"type Manifest = typeof manifest"})," for the client."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// nest-rpc.config.ts\nimport { defineManifest } from '@nestjs-rpc/server';\nimport { UserQueriesRouter } from './user.queries.router';\n\nexport const manifest = defineManifest({\n  user: { queries: UserQueriesRouter },\n});\n\nexport type Manifest = typeof manifest;\n\nNote: The nested keys you define here are the paths the client will use. For the example above, method access becomes: `rpc.user.queries.getUser(...)`.\n"})}),"\n",(0,s.jsx)(t.h3,{id:"3-initialize-rpc-before-nestfactorycreate-server",children:"3) Initialize RPC before NestFactory.create (server)"}),"\n",(0,s.jsxs)(t.p,{children:["Call ",(0,s.jsx)(t.code,{children:"nestRpcInit(manifest, { apiPrefix })"})," BEFORE ",(0,s.jsx)(t.code,{children:"NestFactory.create(...)"}),". This applies Nest decorators so routes can\nbe discovered at bootstrap."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// main.ts\nimport { NestFactory } from "@nestjs/core";\nimport { AppModule } from "./app.module";\nimport { nestRpcInit } from "@nestjs-rpc/server";\nimport { manifest } from "./nest-rpc.config";\n\nasync function bootstrap() {\n   nestRpcInit(manifest, { apiPrefix: "nestjs-rpc" /* default */ });\n   const app = await NestFactory.create(AppModule);\n   await app.listen(3000);\n}\n\nbootstrap();\n'})}),"\n",(0,s.jsx)(t.h3,{id:"4-create-a-typed-client-client",children:"4) Create a typed client (client)"}),"\n",(0,s.jsxs)(t.p,{children:["Import the server ",(0,s.jsx)(t.code,{children:"Manifest"})," type and build the client."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// rpc.ts (client)\nimport { RpcClient } from "@nestjs-rpc/client";\nimport type { Manifest } from "../server/nest-rpc.config";\n\nexport const client = new RpcClient<Manifest>({\n   baseUrl: "http://localhost:3000",\n   apiPrefix: "nestjs-rpc",\n});\n\n// Recommended: derive stable router constants\nexport const rpc = client.routers();\nexport const userRepo = rpc.user;\n'})}),"\n",(0,s.jsx)(t.h3,{id:"5-call-methods-like-local-functions-client",children:"5) Call methods like local functions (client)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'const { data: user } = await rpc.user.queries.getUser({ id: "1" });\nconst { data: all } = await rpc.user.queries.listUsers();\n// Or via a router constant\nconst { data: one } = await userRepo.queries.getUser({ id: "1" });\n'})}),"\n",(0,s.jsx)(t.h3,{id:"example-repo",children:"Example repo"}),"\n",(0,s.jsxs)(t.p,{children:["See a full working example in the monorepo under ",(0,s.jsx)(t.code,{children:"NestRPC/example"})," (server and client). The docs here mirror that usage\nstyle."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var n=r(6540);const s={},i=n.createContext(s);function a(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);