"use strict";(self.webpackChunknestjs_rpc_docs=self.webpackChunknestjs_rpc_docs||[]).push([[109],{7317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"client/overview","title":"Client Overview","description":"Create a typed RPC client and call routes like local functions","source":"@site/docs/client/overview.md","sourceDirName":"client","slug":"/client/overview","permalink":"/NestRPC-docs/docs/client/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Natansal/NestRPC-docs/blob/main/docs/client/overview.md","tags":[],"version":"current","frontMatter":{"title":"Client Overview","description":"Create a typed RPC client and call routes like local functions"},"sidebar":"tutorialSidebar","previous":{"title":"Server Error Handling","permalink":"/NestRPC-docs/docs/server/error-handling"},"next":{"title":"Client Configuration","permalink":"/NestRPC-docs/docs/client/configuration"}}');var s=n(4848),o=n(8453);const i={title:"Client Overview",description:"Create a typed RPC client and call routes like local functions"},c=void 0,a={},l=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The client mirrors your server router map using TypeScript inference."}),"\n",(0,s.jsxs)(t.p,{children:["Responses are Axios ",(0,s.jsx)(t.code,{children:"AxiosResponse"}),", so destructure ",(0,s.jsx)(t.code,{children:"data"})," from the result."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { RpcClient } from '@nestjs-rpc/client';\nimport type { Manifest } from '../server/nest-rpc.config';\n\nconst client = new RpcClient<Manifest>({ baseUrl: 'http://localhost:3000', apiPrefix: 'nestjs-rpc' });\nconst rpc = client.routers();\n// Recommended router constants\nexport const userRepo = client.route('user');\n\n// Calls\nconst { data: user } = await rpc.user.queries.getUser({ id: '1' });\nconst { data: all } = await rpc.user.queries.listUsers();\nconst { data: one } = await userRepo.queries.getUser({ id: '1' });\n"})}),"\n",(0,s.jsx)(t.p,{children:"Errors surface through the HTTP client (Axios) as usual. Handle with try/catch or interceptors."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);